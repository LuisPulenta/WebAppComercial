@inject SweetAlertService swal
@inject IRepository repository

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation"></NavigationLock>

<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="row">

            @* ------------------------------- Columna 1 -------------------------------------*@
            <div class="col-3">

                <div class="row g-3 align-items-center">
                    <div class="col-3">
                        <label class="col-form-label fw-bold">Fecha:</label>
                    </div>
                    <div class="col-5">
                        <InputDate class="form-control" @bind-Value="@BuyDTO.Date" />
                        <ValidationMessage For="@(() => BuyDTO.Date)" />
                    </div>
                </div>

                <div class="row g-3 align-items-center">
                    <div class="col-3">
                        <label class="col-form-label fw-bold">Almacén:</label>
                    </div>
                    <div class="col-9">
                        <select class="form-select" @bind="@BuyDTO.StoreId">
                            <option value="0">-- Seleccione un Almacén --</option>
                            @if (stores is not null)
                            {
                                @foreach (var store in stores)
                                {
                                    <option value="@store.Id">@store.Name</option>
                                }
                            }
                        </select>
                        <ValidationMessage For="@(() => BuyDTO.StoreId)" />
                    </div>
                </div>

                <div class="row g-3 align-items-center">
                    <div class="col-3">
                        <label class="col-form-label fw-bold">Proveedor:</label>
                    </div>
                    <div class="col-9">
                        <select class="form-select" @bind="@BuyDTO.SupplierId">
                            <option value="0">-- Seleccione un Proveedor --</option>
                            @if (suppliers is not null)
                            {
                                @foreach (var supplier in suppliers)
                                {
                                    <option value="@supplier.Id">@supplier.Name</option>
                                }
                            }
                        </select>
                        <ValidationMessage For="@(() => BuyDTO.SupplierId)" />
                    </div>
                </div>
            </div>

            @* ------------------------------- Columna 2 -------------------------------------*@
            <div class="col-4">

                <div class="row g-3 align-items-center">
                    <div class="col-3">
                        <label class="col-form-label fw-bold">Producto:</label>
                    </div>
                    <div class="col-3">
                        <input type="number" class="form-control" value="@productId" @onchange="SearchProduct" />
                    </div>
                    <div class="col-6">
                        <label class="col-form-label fw-bold">@description</label>
                    </div>
                </div>

                <div class="row g-3 align-items-center">
                    <div class="col-3">
                        <label class="col-form-label fw-bold">Cantidad:</label>
                    </div>
                    <div class="col-3">
                        <InputNumber class="form-control" @bind-Value="@quantity" />
                        <ValidationMessage For="@(() =>quantity)" />
                    </div>
                </div>

                <div class="row g-3 align-items-center">
                    <div class="col-3">
                        <label class="col-form-label fw-bold">Costo:</label>
                    </div>
                    <div class="col-3">
                        <InputNumber class="form-control" @bind-Value="@cost" />
                        <ValidationMessage For="@(() =>cost)" />
                    </div>
                </div>

                <div class="row g-3 align-items-center">
                    <div class="col-3">
                        <label class="col-form-label fw-bold">% Descuento:</label>
                    </div>
                    <div class="col-3">
                        <InputNumber class="form-control" @bind-Value="@discount" />
                        <ValidationMessage For="@(() =>discount)" />
                    </div>
                </div>

                <div class="row g-3 align-items-center">
                    <div class="col-9">
                    </div>
                    <div class="col-3">
                        <button class="btn btn-sm btn-outline-primary" @onclick="AddMove">
                            <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" class="bi bi-plus-circle-fill" viewBox="0 0 16 16">
                                <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0M8.5 4.5a.5.5 0 0 0-1 0v3h-3a.5.5 0 0 0 0 1h3v3a.5.5 0 0 0 1 0v-3h3a.5.5 0 0 0 0-1h-3z" />
                            </svg>
                            Agregar
                        </button>
                    </div>
                </div>

            </div>

            @* ------------------------------- Columna 3 -------------------------------------*@
            <div class="col-5">
                <div class="row g-3 align-items-center">
                    <div class="col-2">
                        <label class="col-form-label fw-bold">Imagen:</label>
                    </div>
                    <div class="col-10">
                        @if (@product != null)
                        {
                            @if (@product!.Image == null || @product.Image == "" || @product.Image == string.Empty)
                            {
                            }
                            else

                            {
                                <img src="@product.ImageFullPath" width="160" />
                            }
                        }
                    </div>
                </div>
            </div>
        </div>

        <br />

        @* ----------------------- Detalle ----------------------- *@
        <GenericList MyList="myDetails">
            <Body>
                <table class="table table-sm table-info table-striped">
                    <thead>
                        <tr>
                            <th><p align='center'>Id</p></th>
                            <th><p align='center'>Descripción</p></th>
                            <th><p align='center'>Cantidad</p></th>
                            <th><p align='center'>Costo</p></th>
                            <th><p align='center'>IVA</p></th>
                            <th><p align='center'>% Descuento</p></th>
                            <th><p align='center'>Valor Bruto</p></th>
                            <th><p align='center'>Valor IVA</p></th>
                            <th><p align='center'>Valor Descuento</p></th>
                            <th><p align='center'>Valor Neto</p></th>
                            <th style="width:60px"></th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var detail in myDetails!)
                        {
                            <tr>
                                <td>
                                    @detail.ProductId
                                </td>
                                <td>
                                    @detail.Description
                                </td>
                                <td>
                                    <p align='right'>
                                        @($"{detail.Quantity:N2}")
                                    </p>
                                </td>
                                <td>
                                    <p align='right'>
                                        @($"{detail.Cost:N2} $")
                                    </p>
                                </td>
                                <td>
                                    <p align='right'>
                                        @($"{detail.PercentageIVA:P2}")
                                    </p>
                                </td>
                                <td>
                                    <p align='right'>
                                        @($"{detail.PercentageDiscount:P2}")
                                    </p>
                                </td>
                                <td>
                                    <p align='right'>
                                        @($"{detail.valorBruto:N2} $")
                                    </p>
                                </td>
                                <td>
                                    <p align='right'>
                                        @($"{detail.valorIVA:N2} $")
                                    </p>
                                </td>
                                <td>
                                    <p align='right'>
                                        @($"{detail.valorDescuento:N2} $")
                                    </p>
                                </td>
                                <td>
                                    <p align='right'>
                                        @($"{detail.valorNeto:N2} $")
                                    </p>
                                </td>

                                <td>

                                    @* @onclick=@(() => DeleteAsync(store.Id)) *@
                                    <button class="btn btn-danger btn-sm">
                                        <i class="bi bi-trash3-fill" />
                                        <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="white" class="bi bi-trash3-fill" viewBox="0 0 16 16">
                                            <path d="M11 1.5v1h3.5a.5.5 0 0 1 0 1h-.538l-.853 10.66A2 2 0 0 1 11.115 16h-6.23a2 2 0 0 1-1.994-1.84L2.038 3.5H1.5a.5.5 0 0 1 0-1H5v-1A1.5 1.5 0 0 1 6.5 0h3A1.5 1.5 0 0 1 11 1.5m-5 0v1h4v-1a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5M4.5 5.029l.5 8.5a.5.5 0 1 0 .998-.06l-.5-8.5a.5.5 0 1 0-.998.06m6.53-.528a.5.5 0 0 0-.528.47l-.5 8.5a.5.5 0 0 0 .998.058l.5-8.5a.5.5 0 0 0-.47-.528M8 4.5a.5.5 0 0 0-.5.5v8.5a.5.5 0 0 0 1 0V5a.5.5 0 0 0-.5-.5" />
                                        </svg>
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </Body>
        </GenericList>

        @* ----------------------- Totales ----------------------- *@
        <div class="row">
            <div class="col-2">
            </div>
            <div class="col-2">
                <div class="row g-3 align-items-center">
                    <div class="col-7">
                        <label class="col-form-label fw-bold">Cant. Items:</label>
                    </div>
                    <div class="col-5">
                        <label class="col-form-label fw-bold">@totalItems</label>
                    </div>
                </div>
            </div>

            <div class="col-2">
                <div class="row g-3 align-items-center">
                    <div class="col-7">
                        <label class="col-form-label fw-bold">Total Bruto:</label>
                    </div>
                    <div class="col-5">
                        <label class="col-form-label fw-bold">@($"{totalValorBruto:N2} $")</label>
                    </div>
                </div>
            </div>

            <div class="col-2">
                <div class="row g-3 align-items-center">
                    <div class="col-7">
                        <label class="col-form-label fw-bold">Total IVA:</label>
                    </div>
                    <div class="col-5">
                        <label class="col-form-label fw-bold">@($"{totalValorIva:N2} $")</label>
                    </div>
                </div>
            </div>

            <div class="col-2">
                <div class="row g-3 align-items-center">
                    <div class="col-7">
                        <label class="col-form-label fw-bold">Total Descuento:</label>
                    </div>
                    <div class="col-5">
                        <label class="col-form-label fw-bold">@($"{totalValorDescuento:N2} $")</label>
                    </div>
                </div>
            </div>

            <div class="col-2">
                <div class="row g-3 align-items-center">
                    <div class="col-7">
                        <label class="col-form-label fw-bold">Total Neto:</label>
                    </div>
                    <div class="col-5">
                        <label class="col-form-label fw-bold">@($"{totalValorNeto:N2} $")</label>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="offset-8 col-3">
                <button class="btn btn-sm btn-outline-primary" type="submit" @onclick="Guardar">
                    <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" class="bi bi-floppy-fill" viewBox="0 0 16 16">
                        <path d="M0 1.5A1.5 1.5 0 0 1 1.5 0H3v5.5A1.5 1.5 0 0 0 4.5 7h7A1.5 1.5 0 0 0 13 5.5V0h.086a1.5 1.5 0 0 1 1.06.44l1.415 1.414A1.5 1.5 0 0 1 16 2.914V14.5a1.5 1.5 0 0 1-1.5 1.5H14v-5.5A1.5 1.5 0 0 0 12.5 9h-9A1.5 1.5 0 0 0 2 10.5V16h-.5A1.5 1.5 0 0 1 0 14.5z" />
                        <path d="M3 16h10v-5.5a.5.5 0 0 0-.5-.5h-9a.5.5 0 0 0-.5.5zm9-16H4v5.5a.5.5 0 0 0 .5.5h7a.5.5 0 0 0 .5-.5zM9 1h2v4H9z" />
                    </svg>
                    Guardar Cambios
                </button>
                <button class="btn btn-sm btn-outline-success" @onclick="ReturnAction">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-left-circle-fill" viewBox="0 0 16 16">
                        <path d="M8 0a8 8 0 1 0 0 16A8 8 0 0 0 8 0m3.5 7.5a.5.5 0 0 1 0 1H5.707l2.147 2.146a.5.5 0 0 1-.708.708l-3-3a.5.5 0 0 1 0-.708l3-3a.5.5 0 1 1 .708.708L5.707 7.5z" />
                    </svg>
                    Regresar
                </button>
            </div>
        </div>


    </div>

</EditForm>

@code {
    private EditContext editContext = null!;
    private List<Store>? stores;
    private List<Supplier>? suppliers;
    private int? productId;
    private string? productId2;
    private double? quantity;
    private decimal? cost;
    private double? discount;
    private string description = "";
    private Product? product;
    List<MoveDetail> myDetails = new List<MoveDetail>();

    private int totalItems = 0;
    private decimal totalValorBruto = 0;
    private decimal totalValorIva = 0;
    private decimal totalValorDescuento = 0;
    private decimal totalValorNeto = 0;

    [EditorRequired]
    [Parameter]
    public BuyDTO BuyDTO { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public EventCallback OnValidSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; } = false;

    //---------------------------------------------------------------------------------
    protected override void OnInitialized()
    {
        editContext = new(BuyDTO);
    }

    //---------------------------------------------------------------------------------
    protected override async Task OnInitializedAsync()
    {
        await LoadStoresAsync();
        await LoadSuppliersAsync();
        BuyDTO.Date = DateTime.Now;
    }

    //---------------------------------------------------------------------------------
    private async Task LoadStoresAsync()
    {
        var responseHttp = await repository.Get<List<Store>>("/api/stores/combo");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessage();
            await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        stores = responseHttp.Response;
    }

    //---------------------------------------------------------------------------------
    private async Task LoadSuppliersAsync()
    {
        var responseHttp = await repository.Get<List<Supplier>>("/api/suppliers/combo");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessage();
            await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        suppliers = responseHttp.Response;
    }

    //---------------------------------------------------------------------------------
    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasMofied = editContext.IsModified();
        if (!formWasMofied || FormPostedSuccessfully)
        {
            return;
        }

        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        var confirm = !string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }

    //---------------------------------------------------------------------------------
    private async Task SearchProduct(ChangeEventArgs e)
    {
        description = "";
        var message = string.Empty;

        if (e.Value is null)
        {
            var toast = swal.Mixin(new SweetAlertOptions
                {
                    Toast = true,
                    Position = SweetAlertPosition.Center,
                    ShowConfirmButton = true,
                    Timer = 3000
                });
            await toast.FireAsync(icon: SweetAlertIcon.Error, message: "Debe ingresar un Producto.");
            return;
        }
        long producto;
        try
        {
            producto = Convert.ToInt32(e.Value);
        }
        catch (Exception ex)
        {
            producto = 0;
        }

        if (producto == 0)
        {
            var toast = swal.Mixin(new SweetAlertOptions
                {
                    Toast = true,
                    Position = SweetAlertPosition.Center,
                    ShowConfirmButton = true,
                    Timer = 3000
                });
            await toast.FireAsync(icon: SweetAlertIcon.Error, message: "Debe ingresar un valor numérico entero.");
            return;
        }

        if (producto < 0)
        {
            var toast = swal.Mixin(new SweetAlertOptions
                {
                    Toast = true,
                    Position = SweetAlertPosition.Center,
                    ShowConfirmButton = true,
                    Timer = 3000
                });
            await toast.FireAsync(icon: SweetAlertIcon.Error, message: "Debe ingresar un valor positivo.");
            return;
        }

        if (e.Value is not null)
        {
            productId2 = e.Value.ToString();
            var responseHttp = await repository.Get<Product>($"/api/products/{productId2}");
            if (responseHttp.Error)
            {
                var toast = swal.Mixin(new SweetAlertOptions
                    {
                        Toast = true,
                        Position = SweetAlertPosition.Center,
                        ShowConfirmButton = true,
                        Timer = 3000
                    });
                await toast.FireAsync(icon: SweetAlertIcon.Error, message: "Elproducto no existe.");
                return;
            }

            product = responseHttp.Response;
            description = product!.Name;
            productId = product.Id;
        }
    }

    //---------------------------------------------------------------------------------
    private async Task AddMove()
    {
        // ----- Verifica Product -----
        if (productId is null)
        {
            var toast = swal.Mixin(new SweetAlertOptions
                {
                    Toast = true,
                    Position = SweetAlertPosition.Center,
                    ShowConfirmButton = true,
                    Timer = 3000
                });
            await toast.FireAsync(icon: SweetAlertIcon.Error, message: "Debe ingresar un producto.");
            return;
        }

        // ----- Verifica Cantidad -----
        if (quantity is null)
        {
            var toast = swal.Mixin(new SweetAlertOptions
                {
                    Toast = true,
                    Position = SweetAlertPosition.Center,
                    ShowConfirmButton = true,
                    Timer = 3000
                });
            await toast.FireAsync(icon: SweetAlertIcon.Error, message: "Debe ingresar una cantidad.");
            return;
        }
        decimal value = 0;
        try
        {
            value = Convert.ToDecimal(quantity);
        }
        catch (Exception ex)
        {
            value = 0;
        }
        if (value <= 0)
        {
            var toast = swal.Mixin(new SweetAlertOptions
                {
                    Toast = true,
                    Position = SweetAlertPosition.Center,
                    ShowConfirmButton = true,
                    Timer = 3000
                });
            await toast.FireAsync(icon: SweetAlertIcon.Error, message: "Debe ingresar una cantidad.");
            return;
        }

        // ----- Verifica Costo -----
        if (cost is null)
        {
            var toast = swal.Mixin(new SweetAlertOptions
                {
                    Toast = true,
                    Position = SweetAlertPosition.Center,
                    ShowConfirmButton = true,
                    Timer = 3000
                });
            await toast.FireAsync(icon: SweetAlertIcon.Error, message: "Debe ingresar un costo.");
            return;
        }
        decimal value2 = 0;
        try
        {
            value2 = Convert.ToDecimal(cost);
        }
        catch (Exception ex)
        {
            value2 = 0;
        }
        if (value2 <= 0)
        {
            var toast = swal.Mixin(new SweetAlertOptions
                {
                    Toast = true,
                    Position = SweetAlertPosition.Center,
                    ShowConfirmButton = true,
                    Timer = 3000
                });
            await toast.FireAsync(icon: SweetAlertIcon.Error, message: "Debe ingresar un costo.");
            return;
        }

        // ----- Verifica Descuento -----
        decimal value3 = 0;

        if (discount == null)
        {
            discount = 0;
        }

        try
        {
            value3 = Convert.ToDecimal(discount);
        }
        catch (Exception ex)
        {
            value3 = 0;
        }
        if (value3 < 0 || value3 > 1)
        {
            var toast = swal.Mixin(new SweetAlertOptions
                {
                    Toast = true,
                    Position = SweetAlertPosition.Center,
                    ShowConfirmButton = true,
                    Timer = 3000
                });
            await toast.FireAsync(icon: SweetAlertIcon.Error, message: "Debe ingresar un descuento entre 0 y 1.");
            return;
        }


        MoveDetail moveDetail = new MoveDetail();
        moveDetail.Cost = (decimal)cost!;
        moveDetail.PercentageIVA = 0.21;
        moveDetail.ProductId = product!.Id;
        moveDetail.Description = product.Name;
        moveDetail.Quantity = (double)quantity!;
        moveDetail.PercentageDiscount = (double)discount!;

        myDetails.Add(moveDetail);

        totalItems++;
        totalValorBruto += moveDetail.valorBruto;
        totalValorIva += moveDetail.valorIVA;
        totalValorDescuento += moveDetail.valorDescuento;
        totalValorNeto += moveDetail.valorNeto;

        productId = null;
        product = null;
        quantity = null;
        cost = null;
        discount = null; ;
        description = "";
    }

    //---------------------------------------------------------------------------------
    private async Task Guardar()
    {
        var toast = swal.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.Center,
                ShowConfirmButton = true,
                Timer = 3000
            });

        //---------- Verifica Almacén ----------
        if (BuyDTO.StoreId <= 0)
        {
            await toast.FireAsync(icon: SweetAlertIcon.Error, message: "Debe seleccionar un Almacén");
            return;
        }

        //---------- Verifica Proveedor ----------
        if (BuyDTO.SupplierId <= 0)
        {
            await toast.FireAsync(icon: SweetAlertIcon.Error, message: "Debe seleccionar un Proveedor");
            return;
        }

        //---------- Verifica que haya Productos cargados ----------
        if (myDetails.Count == 0)
        {
            await toast.FireAsync(icon: SweetAlertIcon.Error, message: "Debe cargar al menos un Producto");
            return;
        }

        //---------- Guardar Cabececera de Compra ----------

        var httpResponse = await repository.Post<BuyDTO,Buy>("/api/buys", BuyDTO);
        if (httpResponse.Error)
        {
            var message = await httpResponse.GetErrorMessage();
            await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        Buy newBuy = new Buy();
        newBuy = httpResponse.Response!;


        foreach (MoveDetail detail in myDetails)
        {
            //---------- Guardar AlmacénProducto ----------

            var httpResponse2 = await repository.Get<Storeproduct>($"/api/storeproducts/GetStoreprodutByProductAndStoreAsync/{detail.ProductId}/{BuyDTO.StoreId}");
            Storeproduct storeproduct = new Storeproduct();
            storeproduct = httpResponse2.Response!;

            StoreproductDTO storeproductDTO = new StoreproductDTO();

            if (storeproduct == null)
            {
                storeproductDTO.ProductId = detail.ProductId;
                storeproductDTO.StoreId = BuyDTO.StoreId;
                storeproductDTO.Stock = detail.Quantity;
                storeproductDTO.Minimum = 0;
                storeproductDTO.Maximum = 0;
                storeproductDTO.Replacementdays = 0;
                storeproductDTO.Minimumquantity = 0;
                await repository.Post("/api/storeproducts/",storeproductDTO);
            }
            else
            {
                storeproductDTO.Id = storeproduct.Id;
                storeproductDTO.ProductId = storeproduct.ProductId;
                storeproductDTO.StoreId = storeproduct.StoreId;
                storeproductDTO.Stock = storeproduct.Stock + detail.Quantity;
                storeproductDTO.Minimum = storeproduct.Minimum;
                storeproductDTO.Maximum = storeproduct.Maximum;
                storeproductDTO.Replacementdays = storeproduct.Replacementdays;
                storeproductDTO.Minimumquantity = storeproduct.Minimumquantity;
                await repository.Put("/api/storeproducts/", storeproductDTO);
            }
            //---------- Guardar Kardex ----------

            var httpResponse3 = await repository.Get<Move>($"/api/moves/lastmove/{BuyDTO.StoreId}/{detail.ProductId}");
            Move lastMove = new Move();
            lastMove = httpResponse3.Response!;

            double lastBalance = 0;
            decimal lastAverageCost = 0;

            if (lastMove != null)
            {
                lastBalance = lastMove.Balance;
                lastAverageCost = lastMove.AverageCost; 
            }

            MoveDTO newmoveDTO = new MoveDTO();

            newmoveDTO.StoreId = BuyDTO.StoreId;
            newmoveDTO.ProductId = detail.ProductId;
            newmoveDTO.Date = BuyDTO.Date;
            newmoveDTO.Document = $"CO-{newBuy.Id}";
            newmoveDTO.Entrance = detail.Quantity;
            newmoveDTO.Exit =0;
            newmoveDTO.Balance = lastBalance + detail.Quantity;
            newmoveDTO.LastCost =detail.Cost;
            newmoveDTO.AverageCost = ((decimal)lastBalance * lastAverageCost + (decimal)detail.Quantity * detail.Cost) / ((decimal)lastBalance + (decimal)detail.Quantity);

            var httpResponse4 = await repository.Post<MoveDTO,Move>("/api/moves/", newmoveDTO);

            Move newMove = new Move();
            newMove = httpResponse4.Response!;

            //---------- Guardar Detalle Compra ----------

            BuyDetail newbuydetailDTO = new BuyDetail();

            newbuydetailDTO.BuyId = newBuy.Id;
            newbuydetailDTO.ProductId = detail.ProductId;
            newbuydetailDTO.Name = detail.Description;
            newbuydetailDTO.Cost = detail.Cost;
            newbuydetailDTO.Quantity = detail.Quantity;
            newbuydetailDTO.MoveId = newMove.Id;
            newbuydetailDTO.PercentageDiscount = detail.PercentageDiscount;
            newbuydetailDTO.PercentageIVA = detail.PercentageIVA;

            await repository.Post("/api/buydetails/", newbuydetailDTO);
        }
 
        //---------- Limpia Campos ----------
        BuyDTO.StoreId = 0;
        BuyDTO.SupplierId = 0;
        BuyDTO.Date = DateTime.Now;
        myDetails.Clear();

        //---------- Mensaje Ok ----------
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Compra creada con éxito.");
    }
}