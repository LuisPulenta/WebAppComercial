@page "/storeproduct/edit"
@attribute [Authorize(Roles = "Admin")]
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService swal

<h3>Editar Parámetro de Almacén</h3>

<StoreproductForm @ref="storeproductForm" StoreproductDTO="storeproductDTO" IsEdit=true OnValidSubmit="EditAsync" ReturnAction="Return" />

@code {
    private Product? product;
    private Store? store;
    private StoreproductDTO storeproductDTO = new();
    private StoreproductForm? storeproductForm;

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [Parameter]
    public Storeproduct? storeproduct { get; set; }



    protected override async Task OnInitializedAsync()
    {
        var responseHttp = await repository.Get<Product>($"/api/products/{storeproduct!.ProductId}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo($"/products/edit/{storeproduct!.ProductId}");
                return;
            }

            var message = await responseHttp.GetErrorMessage();
            await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        product = responseHttp.Response;
        storeproduct.Product = product!;

        storeproductDTO.ProductId = storeproduct.ProductId;
        storeproductDTO.Maximum = storeproduct.Maximum;
        storeproductDTO.Minimum = storeproduct.Minimum;
        storeproductDTO.Replacementdays = storeproduct.Replacementdays;
        storeproductDTO.Minimumquantity = storeproduct.Minimumquantity;
        storeproductDTO.StoreId = storeproduct.StoreId;
        storeproductDTO.Stock = storeproduct.Stock;
        storeproductDTO.Id = storeproduct.Id;

    }

    private async Task EditAsync()
    {
        var httpResponse = await repository.Put("/api/storeproducts", storeproductDTO);
        if (httpResponse.Error)
        {
            var message = await httpResponse.GetErrorMessage();
            await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        var toast = swal.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.Center,
                ShowConfirmButton = true,
                Timer = 3000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Parámetro de Almacén actualizado con éxito.");
        await BlazoredModal.CloseAsync(ModalResult.Ok());
        Return();
    }

    private void Return()
    {
        navigationManager.NavigateTo($"/products/edit/{storeproduct!.ProductId}");
    }
}
