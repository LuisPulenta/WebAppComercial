@page "/products/edit/{Id:int}"
@attribute [Authorize(Roles = "Admin")]
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService swal

<h3>Editar Producto</h3>

@if (loading)
{
    <Spinner />
}
else
{
    <ProductForm @ref="productForm" ProductDTO="productDTO" OnValidSubmit="EditAsync" ReturnAction="Return"
                 IsEdit=true AddImageAction="AddImageAsync" RemoveImageAction="RemoveImageAsync" />
}


@code {
    private ProductDTO productDTO = new ProductDTO();
    private ProductForm? productForm;
    private Product? product;
    private bool loading = true;

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [Parameter]
    public int Id { get; set; }

    //-------------------------------------------------------------------------------------------------
    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    //-------------------------------------------------------------------------------------------------
    private async Task LoadAsync()
    {

        loading = true;
        var responseHTTP = await repository.Get<Product>($"/api/products/{Id}");
        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("products");
                return;
            }
            else
            {
                loading = false;
                var messageError = await responseHTTP.GetErrorMessage();
                await swal.FireAsync("Error", messageError, SweetAlertIcon.Error);
                return;
            }

        }
        product = responseHTTP.Response!;
        productDTO = ToProductDTO(product);
        loading = false;
    }

    //-------------------------------------------------------------------------------------------------
    private ProductDTO ToProductDTO(Product product)
    {
        return new ProductDTO
            {
                Id = product.Id,
                Name = product.Name,
                CategoryId = product.CategoryId,
                Image = product.Image,
                IvaId = product.IvaId,
                MeasureId = product.MeasureId,
                Price = product.Price,
                Quantity = product.Quantity,
                Remarks = product.Remarks,
                ProductImages = product.ProductImages!.Select(x => x.ImageFullPath).ToList()
            };
    }

    //-------------------------------------------------------------------------------------------------
    private async Task EditAsync()
    {
        var responseHTTP = await repository.Put("/api/products", productDTO);
        if (responseHTTP.Error)
        {
            var mensajeError = await responseHTTP.GetErrorMessage();
            await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            return;
        }
        productForm!.FormPostedSuccessfully = true;
        var toast = swal.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.Center,
                ShowConfirmButton = true,
                Timer = 3000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Cambios guardados con éxito.");

        await BlazoredModal.CloseAsync(ModalResult.Ok());
        navigationManager.NavigateTo("/products");
    }

    //-------------------------------------------------------------------------------------------------
    private void Return()
    {
        productForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo("/products");
    }

    //-------------------------------------------------------------------------------------------------
    private async Task AddImageAsync()
    {
        if (productDTO.Image is null)
        {
            return;
        }

        var imageDTO = new ImageDTO
            {
                ProductId = Id,
                Image = productDTO.Image!
            };

        var httpResponse = await repository.Post<ImageDTO, ImageDTO>("/api/products/addImages", imageDTO);
        if (httpResponse.Error)
        {
            var message = await httpResponse.GetErrorMessage();
            await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        var toast = swal.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.Center,
                ShowConfirmButton = true,
                Timer = 3000
            });
        await LoadAsync();
        productDTO.Image = null;
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Imagen agregada con éxito.");
    }

    //-------------------------------------------------------------------------------------------------
    private async Task RemoveImageAsync()
    {
        if (productDTO.ProductImages is null || productDTO.ProductImages.Count == 0)
        {
            return;
        }

        var imageDTO = new ImageDTO
            {
                ProductId = Id,
                Image = productDTO.ProductImages.LastOrDefault()!
            };

        var httpResponse = await repository.Post<ImageDTO, ImageDTO>("/api/products/removeLastImage", imageDTO);
        if (httpResponse.Error)
        {
            var message = await httpResponse.GetErrorMessage();
            await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        var toast = swal.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.Center,
                ShowConfirmButton = true,
                Timer = 3000
            });
        await LoadAsync();
        productDTO.Image = null;
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Imagen eliminada con éxito.");
    }
}
