@inject SweetAlertService swal
@inject IRepository repository

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation"></NavigationLock>

<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />

    <div class="container">
        <div class="row">
            <div class=@col>
                <div class="row g-3 align-items-center">
                    <div class="col-2">
                        <label class="col-form-label fw-bold">Nombre:</label>
                    </div>
                    <div class="col-10">
                        <InputText class="form-control" @bind-Value="@ProductDTO.Name" />
                        <ValidationMessage For="@(() => ProductDTO.Name)" />
                    </div>
                </div>

                <div class="row g-3 align-items-center">
                    <div class="col-2">
                        <label class="col-form-label fw-bold">Categoría:</label>
                    </div>
                    <div class="col-10">
                        <select class="form-select" @bind="@ProductDTO.CategoryId">
                            <option value="0">-- Seleccione una Categoría --</option>
                            @if (categories is not null)
                            {
                                @foreach (var category in categories)
                                {
                                    <option value="@category.Id">@category.Name</option>
                                }
                            }
                        </select>
                        <ValidationMessage For="@(() => ProductDTO.CategoryId)" />
                    </div>
                </div>

                <div class="row g-3 align-items-center">
                    <div class="col-2">
                        <label class="col-form-label fw-bold">Unidad:</label>
                    </div>
                    <div class="col-10">
                        <select class="form-select" @bind="@ProductDTO.MeasureId">
                            <option value="0">-- Seleccione una Unidad --</option>
                            @if (measures is not null)
                            {
                                @foreach (var measure in measures)
                                {
                                    <option value="@measure.Id">@measure.Name</option>
                                }
                            }
                        </select>
                        <ValidationMessage For="@(() => ProductDTO.MeasureId)" />
                    </div>
                </div>

                <div class="row g-3 align-items-center">
                    <div class="col-2">
                        <label class="col-form-label fw-bold">Medida:</label>
                    </div>
                    <div class="col-10">
                        <InputNumber class="form-control" @bind-Value="@ProductDTO.Quantity" />
                        <ValidationMessage For="@(() => ProductDTO.Quantity)" />
                    </div>
                </div>

                <div class="row g-3 align-items-center">
                    <div class="col-2">
                        <label class="col-form-label fw-bold">Precio:</label>
                    </div>
                    <div class="col-10">
                        <InputNumber class="form-control" @bind-Value="@ProductDTO.Price" />
                        <ValidationMessage For="@(() => ProductDTO.Price)" />
                    </div>
                </div>

                <div class="row g-3 align-items-center">
                    <div class="col-2">
                        <label class="col-form-label fw-bold">Notas:</label>
                    </div>
                    <div class="col-10">
                        <InputTextArea class="form-control" @bind-Value="@ProductDTO.Remarks" />
                        <ValidationMessage For="@(() => ProductDTO.Remarks)" />
                    </div>
                </div>

                <div class="row g-3 align-items-center">
                    <div class="col-2">
                        <label class="col-form-label fw-bold">Imagen:</label>
                    </div>
                    <div class="col-10">
                        <InputImg Label="" ImageSelected="ImageSelected" ImageURL="@imageUrl" />
                    </div>
                </div>

                <button class="btn btn-sm btn-outline-primary" type="submit">
                    <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" class="bi bi-floppy-fill" viewBox="0 0 16 16">
                        <path d="M0 1.5A1.5 1.5 0 0 1 1.5 0H3v5.5A1.5 1.5 0 0 0 4.5 7h7A1.5 1.5 0 0 0 13 5.5V0h.086a1.5 1.5 0 0 1 1.06.44l1.415 1.414A1.5 1.5 0 0 1 16 2.914V14.5a1.5 1.5 0 0 1-1.5 1.5H14v-5.5A1.5 1.5 0 0 0 12.5 9h-9A1.5 1.5 0 0 0 2 10.5V16h-.5A1.5 1.5 0 0 1 0 14.5z" />
                        <path d="M3 16h10v-5.5a.5.5 0 0 0-.5-.5h-9a.5.5 0 0 0-.5.5zm9-16H4v5.5a.5.5 0 0 0 .5.5h7a.5.5 0 0 0 .5-.5zM9 1h2v4H9z" />
                    </svg>
                    Guardar Cambios
                </button>
                <button class="btn btn-sm btn-outline-success" @onclick="ReturnAction">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-left-circle-fill" viewBox="0 0 16 16">
                        <path d="M8 0a8 8 0 1 0 0 16A8 8 0 0 0 8 0m3.5 7.5a.5.5 0 0 1 0 1H5.707l2.147 2.146a.5.5 0 0 1-.708.708l-3-3a.5.5 0 0 1 0-.708l3-3a.5.5 0 1 1 .708.708L5.707 7.5z" />
                    </svg>
                    Regresar
                </button>

            </div>


            <div class="col-5">
                @if (IsEdit)
                {
                    <div class="mb-3 fw-bold">
                        <InputImg Label="Galería de Imágenes" ImageSelected="ImageSelected2" ImageURL="@imageUrl2" />
                    </div>
                    <div class="mb-3">
                        <button type="button" class="btn btn-outline-primary" @onclick="AddImageAction"><i class="oi oi-plus" /> Agregar imagen</button>
                        <button type="button" class="btn btn-outline-danger" @onclick="RemoveImageAction"><i class="oi oi-trash" /> Eliminar última imagen</button>
                    </div>
                }

                @if (IsEdit && ProductDTO.ProductImages.Count>0)
                {
                    <CarouselView Images="ProductDTO.ProductImages" />
                }

                @if (IsEdit)
                { 
                <div class="container">
                    <div class="row">
                        <div class="col-12">

                            @if (barcodes is null || barcodes.Count == 0)
                            {
                                <table class="table table-sm table-info table-striped">
                                    <thead>
                                        <tr>
                                            <th>Códigos de Barra</th>
                                            <th>
                                                <a class="btn btn-sm btn-outline-primary float-end" @onclick=@(() => ShowModal(ProductDTO.Id))>
                                                    <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" class="bi bi-plus-circle-fill" viewBox="0 0 16 16">
                                                        <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0M8.5 4.5a.5.5 0 0 0-1 0v3h-3a.5.5 0 0 0 0 1h3v3a.5.5 0 0 0 1 0v-3h3a.5.5 0 0 0 0-1h-3z" />
                                                    </svg>
                                                    Nuevo
                                                </a>
                                            </th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                                            <td>
                                                Este producto no tiene Códigos de Barra
                                            </td>
                                            <td>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            }
                            else
                            {
                                <table class="table table-sm table-info table-striped">
                                    <thead>
                                        <tr>
                                            <th>Códigos de Barra</th>
                                            <th>
                                                <a class="btn btn-sm btn-outline-primary float-end" @onclick=@(() => ShowModal(ProductDTO.Id))>
                                                    <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" class="bi bi-plus-circle-fill" viewBox="0 0 16 16">
                                                        <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0M8.5 4.5a.5.5 0 0 0-1 0v3h-3a.5.5 0 0 0 0 1h3v3a.5.5 0 0 0 1 0v-3h3a.5.5 0 0 0 0-1h-3z" />
                                                    </svg>
                                                    Nuevo
                                                </a>
                                            </th>
                                        </tr>
                                    </thead>
                                    <thead>
                                        <tr>
                                            <th>Código</th>
                                            <th style="width:60px"></th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var barcode in barcodes!)
                                        {
                                            <tr>
                                                <td>
                                                    @barcode.Code
                                                </td>
                                                <td>
                                                    <button class="btn btn-danger btn-sm" @onclick=@(() => DeleteBarCodeAsync(barcode.Code))>
                                                        <i class="bi bi-trash3-fill" />
                                                        <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="white" class="bi bi-trash3-fill" viewBox="0 0 16 16">
                                                            <path d="M11 1.5v1h3.5a.5.5 0 0 1 0 1h-.538l-.853 10.66A2 2 0 0 1 11.115 16h-6.23a2 2 0 0 1-1.994-1.84L2.038 3.5H1.5a.5.5 0 0 1 0-1H5v-1A1.5 1.5 0 0 1 6.5 0h3A1.5 1.5 0 0 1 11 1.5m-5 0v1h4v-1a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5M4.5 5.029l.5 8.5a.5.5 0 1 0 .998-.06l-.5-8.5a.5.5 0 1 0-.998.06m6.53-.528a.5.5 0 0 0-.528.47l-.5 8.5a.5.5 0 0 0 .998.058l.5-8.5a.5.5 0 0 0-.47-.528M8 4.5a.5.5 0 0 0-.5.5v8.5a.5.5 0 0 0 1 0V5a.5.5 0 0 0-.5-.5" />
                                                        </svg>
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            }
                            
                        </div>
                    </div>
                </div>
                }

            </div>
        </div>
             
        @if (IsEdit)
        {
        <div class="container">
            <div class="row">
                <div class="col-12">
                    @if (storeproducts is null || storeproducts.Count==0)
                    {
                        <table class="table table-sm table-info table-striped">
                            <thead>
                                <tr>
                                    <th>Parámetros de Almacén</th>
                                    @* @onclick=@(() => ShowModal()) *@
                                    <th>
                                        <a @onclick=@(() => ShowModal2(ProductDTO.Id)) class="btn btn-sm btn-outline-primary float-end">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" class="bi bi-plus-circle-fill" viewBox="0 0 16 16">
                                                <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0M8.5 4.5a.5.5 0 0 0-1 0v3h-3a.5.5 0 0 0 0 1h3v3a.5.5 0 0 0 1 0v-3h3a.5.5 0 0 0 0-1h-3z" />
                                            </svg>
                                            Nuevo
                                        </a>
                                    </th>
                                </tr>

                            </thead>

                            <tbody>
                                <tr>
                                    <td>
                                        Este producto no tiene Parámetros de Almacén
                                    </td>
                                    <td>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <table class="table table-sm table-info table-striped">
                            <thead>
                                <tr>
                                    <th>Parámetros de Almacén</th>
                                    <th></th>
                                    <th></th>
                                    <th></th>
                                    <th></th>
                                    <th></th>
                                    @* @onclick=@(() => ShowModal()) *@
                                    <th>
                                        <a @onclick=@(() => ShowModal2(ProductDTO.Id)) class="btn btn-sm btn-outline-primary float-end">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" class="bi bi-plus-circle-fill" viewBox="0 0 16 16">
                                                <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0M8.5 4.5a.5.5 0 0 0-1 0v3h-3a.5.5 0 0 0 0 1h3v3a.5.5 0 0 0 1 0v-3h3a.5.5 0 0 0 0-1h-3z" />
                                            </svg>
                                            Nuevo
                                        </a>
                                    </th>
                                </tr>
                            </thead>
                            <thead>
                                <tr>
                                    <th>Almacén</th>
                                    <th>Stock</th>
                                    <th>Mínimo</th>
                                    <th>Máximo</th>
                                    <th>Días Repos.</th>
                                    <th>Cant. Mín. a Ord.</th>
                                    <th style="width:60px"></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var storeproduct in storeproducts!)
                                {
                                    <tr>
                                        <td>
                                            @storeproduct.Store.Name
                                        </td>
                                        <td>
                                            @storeproduct.Stock
                                        </td>
                                        <td>
                                            @storeproduct.Minimum
                                        </td>
                                        <td>
                                            @storeproduct.Maximum
                                        </td>
                                        <td>
                                            @storeproduct.Replacementdays
                                        </td>
                                        <td>
                                            @storeproduct.Minimumquantity
                                        </td>
                                        <td>
                                            @* @onclick=@(() => ShowModal(category.Id, true)) *@
                                            <a  class="btn btn-sm btn-warning btn-sm">
                                                <i class="bi bi-pencil-square" />
                                                <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="white" class="bi bi-pencil-square" viewBox="0 0 16 16">
                                                    <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z" />
                                                    <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5z" />
                                                </svg>
                                            </a>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                </div>
            </div>
        </div>
        }
    </div>
       
</EditForm>



@code {
    private EditContext editContext = null!;
    private List<Category>? categories;
    private List<Measure>? measures;
    private List<Barcode>? barcodes;
    private List<Storeproduct>? storeproducts;
    private string? imageUrl;
    private string? imageUrl2;
    private string col="col-12";

    [CascadingParameter]
    IModalService Modal { get; set; } = default!;

    [Parameter]
    public bool IsEdit { get; set; } = false;

    private void ImageSelected(string imagenBase64)
    {
        ProductDTO.Image = imagenBase64;
        imageUrl = null;
    }

    private void ImageSelected2(string imagenBase64)
    {
        ProductDTO.Image = imagenBase64;
        imageUrl2 = null;
    }

    [EditorRequired]
    [Parameter]
    public ProductDTO ProductDTO { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public EventCallback OnValidSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    [Parameter]
    public EventCallback AddImageAction { get; set; }

    [Parameter]
    public EventCallback RemoveImageAction { get; set; }

    public bool FormPostedSuccessfully { get; set; } = false;

    protected override void OnInitialized()
    {
        editContext = new(ProductDTO);
        if (!string.IsNullOrEmpty(ProductDTO.Image))
        {
            imageUrl = ProductDTO.ImageFullPath;
            ProductDTO.Image = null;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadCategoriesAsync();
        await LoadMeasuresAsync();
        await LoadBarcodesAsync();
        await LoadStoreproductsAsync();
    }

    private async Task LoadCategoriesAsync()
    {
        if (IsEdit)
        {
            col="col-7";
        }
        var responseHttp = await repository.Get<List<Category>>("/api/categories/combo");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessage();
            await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        categories = responseHttp.Response;
    }

    private async Task LoadMeasuresAsync()
    {
        var responseHttp = await repository.Get<List<Measure>>("/api/measures/combo");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessage();
            await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        measures = responseHttp.Response;
    }

    private async Task LoadBarcodesAsync()
    {
        var responseHttp = await repository.Get<List<Barcode>>($"/api/barcodes/{ProductDTO.Id}");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessage();
            await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        barcodes = responseHttp.Response;
    }

    private async Task LoadStoreproductsAsync()
    {
        var responseHttp = await repository.Get<List<Storeproduct>>($"/api/storeproducts/{ProductDTO.Id}");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessage();
            await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        storeproducts = responseHttp.Response;
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasMofied = editContext.IsModified();
        if (!formWasMofied || FormPostedSuccessfully)
        {
            return;
        }

        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        var confirm = !string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }
        context.PreventNavigation();
    }

    private async Task DeleteBarCodeAsync(int id)
    {
        // var result = await swal.FireAsync(new SweetAlertOptions
        //     {
        //         Title = "Confirmación",
        //         Text = "¿Realmente deseas eliminar el registro?",
        //         Icon = SweetAlertIcon.Question,
        //         ShowCancelButton = true,
        //         CancelButtonText = "No",
        //         ConfirmButtonText = "Si"
        //     });

        
        // var confirm2 = string.IsNullOrEmpty(result.Value);

        // if (confirm2)
        // {
        //     return;
        // }

        var responseHttp = await repository.Delete($"/api/barcodes/{id}");

        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessage();
                await swal.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }
        var toast = swal.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.Center,
                ShowConfirmButton = true,
                Timer = 3000
            });
        await LoadBarcodesAsync();
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Código de Barra eliminado con éxito.");
    }

    private async Task ShowModal(int id)
    {
        IModalReference modalReference;
        modalReference = Modal.Show<BarcodeCreate>(string.Empty, new ModalParameters().Add("ProductId", id));
        
        var result = await modalReference.Result;
        if (result.Confirmed)
        {
            await LoadBarcodesAsync();
        }
    }

    private async Task ShowModal2(int id = 0, bool isEdit = false)
    {
        IModalReference modalReference;

        if (isEdit)
        {
            modalReference = Modal.Show<StoreproductCreate>(string.Empty, new ModalParameters().Add("ProductId", id));
        }
        else
        {
            modalReference = Modal.Show<StoreproductCreate>(string.Empty, new ModalParameters().Add("ProductId", id));
        }

        var result = await modalReference.Result;
        if (result.Confirmed)
        {
            await LoadStoreproductsAsync();
        }
    }
}
