@page "/accounts/edit/{Id}"
@inject IRepository repository
@inject SweetAlertService swal
@inject NavigationManager navigationManager
@inject ILoginService loginService

@if (user is null)
{
    <Spinner />
}
else
{
    <EditForm Model="user" OnValidSubmit="SaveUserAsync">
        <DataAnnotationsValidator />

        <div class="card">
            <div class="card-header">
                <span>
                    <i class="oi oi-person" /> Editar Usuario
                    <button class="btn btn-sm btn-outline-success float-end" @onclick="Return">Regresar</button>
                    <button class="btn btn-sm btn-outline-primary float-end mx-2" type="submit"><i class="oi oi-check" /> Guardar Cambios</button>
                </span>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="offset-3col-6">
                        <div class="mb-3">
                            <label>Nombre:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@user.FirstName" />
                                <ValidationMessage For="@(() => user.FirstName)" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <label>Apellido:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@user.LastName" />
                                <ValidationMessage For="@(() => user.LastName)" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <label>Teléfono:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="@user.PhoneNumber" />
                                <ValidationMessage For="@(() => user.PhoneNumber)" />
                            </div>
                        </div>

                        <div class="mb-3">
                            <label>Activo:</label>
                            <div>
                                <input class="form-check-input" type="checkbox" @bind="@user.Active" />
                            </div>
                        </div>

                    </div>
                  
                </div>
            </div>
        </div>
    </EditForm>
}

@code {
    private User? user;
    private List<UserType>? userTypes;

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [Parameter]
    public string Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadUserAsyc();
    }

    private async Task LoadUserAsyc()
    {
        var responseHTTP = await repository.Get<User>($"/api/accounts/GetUserById/{Id}");
        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/users");
                return;
            }
            var messageError = await responseHTTP.GetErrorMessage();
            await swal.FireAsync("Error", messageError, SweetAlertIcon.Error);
            return;
        }
        user = responseHTTP.Response;
    }
    
    private async Task SaveUserAsync()
    {
        var userResponseHttp = await repository.Get<User>("/api/accounts/GetUserLogged");
        User userLogged = userResponseHttp.Response!;

        if (userLogged.Id == user!.Id && !user.Active)
        {
            var messageError = "No se puede desactivar a uno mismo!!!";
            await swal.FireAsync("Error", messageError, SweetAlertIcon.Error);
            return;
        }

        var responseHttp = await repository.Put<User>("/api/accounts", user!);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessage();
            await swal.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        var toast = swal.Mixin(new SweetAlertOptions
            {
                Toast = true,
                Position = SweetAlertPosition.Center,
                ShowConfirmButton = true,
                Timer = 3000
            });
        await toast.FireAsync(icon: SweetAlertIcon.Success, message: "Cambios guardados con éxito.");

        await BlazoredModal.CloseAsync(ModalResult.Ok());
        navigationManager.NavigateTo("/users");
    }

    private void Return()
    {
        navigationManager.NavigateTo("/users");
    }
}
