@page "/api/accounts/ResetPassword"
@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager

@if (loading)
{
    <div class="spinner" />
}
<div class="row">
    <div class="col-md-6  offset-md-3">
        <EditForm Model="resetPasswordDTO" OnValidSubmit="ChangePasswordAsync">
            <DataAnnotationsValidator />
            <div class="card">
                <div class="card-header">
                    <span>
                        <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" class="bi bi-key-fill" viewBox="0 0 16 16">
                            <path d="M3.5 11.5a3.5 3.5 0 1 1 3.163-5H14L15.5 8 14 9.5l-1-1-1 1-1-1-1 1-1-1-1 1H6.663a3.5 3.5 0 0 1-3.163 2M2.5 9a1 1 0 1 0 0-2 1 1 0 0 0 0 2" />
                        </svg>
                         Cambiar Contraseña
                        <button class="btn btn-sm btn-primary float-end mx-2" type="submit">
                            <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" fill="currentColor" class="bi bi-floppy-fill" viewBox="0 0 16 16">
                                <path d="M0 1.5A1.5 1.5 0 0 1 1.5 0H3v5.5A1.5 1.5 0 0 0 4.5 7h7A1.5 1.5 0 0 0 13 5.5V0h.086a1.5 1.5 0 0 1 1.06.44l1.415 1.414A1.5 1.5 0 0 1 16 2.914V14.5a1.5 1.5 0 0 1-1.5 1.5H14v-5.5A1.5 1.5 0 0 0 12.5 9h-9A1.5 1.5 0 0 0 2 10.5V16h-.5A1.5 1.5 0 0 1 0 14.5z" />
                                <path d="M3 16h10v-5.5a.5.5 0 0 0-.5-.5h-9a.5.5 0 0 0-.5.5zm9-16H4v5.5a.5.5 0 0 0 .5.5h7a.5.5 0 0 0 .5-.5zM9 1h2v4H9z" />
                            </svg>
                             Cambiar Contraseña</button>
                    </span>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label>Email:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@resetPasswordDTO.Email" />
                            <ValidationMessage For="@(() => resetPasswordDTO.Email)" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <label>Nueva contraseña:</label>
                        <div>
                            <InputText type="password" class="form-control" @bind-Value="@resetPasswordDTO.Password" />
                            <ValidationMessage For="@(() => resetPasswordDTO.Password)" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <label>Confirmar contraseña:</label>
                        <div>
                            <InputText type="password" class="form-control" @bind-Value="@resetPasswordDTO.ConfirmPassword" />
                            <ValidationMessage For="@(() => resetPasswordDTO.ConfirmPassword)" />
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private ResetPasswordDTO resetPasswordDTO = new();
    private bool loading;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Token { get; set; } = "";

    private async Task ChangePasswordAsync()
    {
        loading = true;
        resetPasswordDTO.Token = Token;
        var responseHttp = await repository.Post("/api/accounts/ResetPassword", resetPasswordDTO);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessage();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            loading = false;
            return;
        }

        loading = false;
        await sweetAlertService.FireAsync("Confirmación", "Contraseña cambiada con éxito, ahora puede ingresar con su nueva contraseña.", SweetAlertIcon.Info);
        navigationManager.NavigateTo("/Login");
    }
}
