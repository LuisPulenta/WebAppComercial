@page "/ivas/edit/{Id:int}"
@attribute [Authorize(Roles = "Admin")]
@inject NavigationManager navigationManager
@inject IRepository repository
@inject SweetAlertService swal

<h3>Editar Iva</h3>

@if (iva is null)
{
    <Spinner />
}
else
{
    <IvaForm @ref="ivaForm" Iva="iva" OnValidSubmit="EditAsync" ReturnAction="Return" />
}


@code {
    private Iva? iva;
    private IvaForm? ivaForm;


    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseHTTP = await repository.Get<Iva>($"/api/ivas/{Id}");
        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("ivas");
                return;
            }
            else
            {
                var messageError = await responseHTTP.GetErrorMessage();
                await swal.FireAsync("Error", messageError, SweetAlertIcon.Error);
                return;
            }

        }
        iva = responseHTTP.Response;
    }

    private async Task EditAsync()
    {
        var responseHTTP = await repository.Put("/api/ivas", iva);
        if (responseHTTP.Error)
        {
            var mensajeError = await responseHTTP.GetErrorMessage();
            await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            return;
        }
        ivaForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo("/ivas");

    }

    private void Return()
    {
        ivaForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo("/ivas");
    }
}
