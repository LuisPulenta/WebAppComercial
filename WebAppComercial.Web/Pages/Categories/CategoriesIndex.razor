@page "/categories"
@attribute [Authorize(Roles = "Admin")]
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService
@inject HttpClient Http
@inject IJSRuntime JS

<h3>Categorías</h3>

<div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
    <div>
        <a class="btn btn-primary" href="/countries/create">Nueva Categoría</a>
    </div>
    <div class="mx-2">
        <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar Categoría..." @bind-value="Filter" />
    </div>
    <div>
        <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync">Filtrar</button>
        <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync">Limpiar</button>
    </div>
</div>

<div class="d-flex justify-content-between align-items-lg-center">
    <a class="btn btn-sm btn-outline-primary mb-3" href="/categories/create">Nueva Categoría</a>
    <div>
        <button class="btn btn-sm btn-outline-success mb-3" data-toggle="tooltip" title="Exportar" @onclick="(()=> ExportarExcel(Categories!))">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-file-earmark-excel-fill" viewBox="0 0 16 16">
                <path d="M9.293 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V4.707A1 1 0 0 0 13.707 4L10 .293A1 1 0 0 0 9.293 0M9.5 3.5v-2l3 3h-2a1 1 0 0 1-1-1M5.884 6.68 8 9.219l2.116-2.54a.5.5 0 1 1 .768.641L8.651 10l2.233 2.68a.5.5 0 0 1-.768.64L8 10.781l-2.116 2.54a.5.5 0 0 1-.768-.641L7.349 10 5.116 7.32a.5.5 0 1 1 .768-.64" />
            </svg>
        </button>

        <button class="btn btn-sm btn-outline-success mb-3" data-toggle="tooltip" title="Exportar" @onclick="(()=> ExportarExcel(CategoriesAll!))">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-file-excel-fill" viewBox="0 0 16 16">
                <path d="M12 0H4a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h8a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2M5.884 4.68 8 7.219l2.116-2.54a.5.5 0 1 1 .768.641L8.651 8l2.233 2.68a.5.5 0 0 1-.768.64L8 8.781l-2.116 2.54a.5.5 0 0 1-.768-.641L7.349 8 5.116 5.32a.5.5 0 1 1 .768-.64" />
            </svg>
        </button>
    </div>
</div>

<GenericList MyList="Categories">
    <Body>
        <table class="table table-sm table-info table-striped">
            <thead>
                <tr>
                    <th>Categoría</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var category in Categories!)
                {
                    <tr>
                        <td>
                            @category.Name
                        </td>
                        <td>
                            <a class="btn btn-warning" href="/categories/edit/@category.Id">Editar</a>
                            <button class="btn btn-danger" @onclick=@(() => DeleteAsync(category.Id))>Borrar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>
<div class="d-flex justify-content-between align-items-lg-center">
    <Pagination CurrentPage="currentPage"
                TotalPages="totalPages"
                SelectedPage="SelectedPage" />
    <p> Total Registros: @totalRegisters</p>
</div>

@code {
    public List<Category>? Categories { get; set; }
    public List<Category>? CategoriesAll { get; set; }
    private int currentPage = 1;
    private int totalPages;
    private int totalRegisters;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;
        string url3 = string.Empty;
        string url4 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"/api/categories?page={page}";
            url2 = $"/api/categories/totalPages";
            url3 = $"/api/categories/totalRegisters";
            url4 = $"/api/categories/all";
        }
        else
        {
            url1 = $"/api/categories?page={page}&filter={Filter}";
            url2 = $"/api/categories/totalPages?filter={Filter}";
            url3 = $"/api/categories/totalRegisters?filter={Filter}";
            url4 = $"/api/categories/all?filter={Filter}";
        }

        

        var responseHttp = await repository.Get<List<Category>>(url1);
        var responseHttp2 = await repository.Get<int>(url2);
        var responseHttp3 = await repository.Get<int>(url3);
        var responseHttp4 = await repository.Get<List<Category>>(url4);
        Categories = responseHttp.Response!;
        totalPages = responseHttp2.Response!;
        totalRegisters = responseHttp3.Response!;
        CategoriesAll = responseHttp4.Response!;
    }

    private async Task DeleteAsync(int id)
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Realmente deseas eliminar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Si"
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.Delete($"/api/categories/{id}");

        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttp.GetErrorMessage();
                await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }
        await LoadAsync();
    }

    private async Task ExportarExcel(List<Category> categories)
    {
        var response = await repository.Post("/api/Excel/ExportExcelCategories", categories);
        var fileStream = response.HttpResponseMessage.Content.ReadAsStream();
        using var streamRef = new DotNetStreamReference(stream: fileStream);
        await JS.InvokeVoidAsync("DescargarExcel", "Categorias.xlsx", streamRef);
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPage(page);
    }
}